using CatppuccinGenerator.Json;
using System;
using System.IO;
using System.Text.Json;

namespace CatppuccinGenerator {
  /// <summary>
  /// Catppuccin generator.
  /// </summary>
  internal class Generator {
    private const string palettePath = @"..\catppuccin-palette\palette.json";

    private const string paletteDotCsPath = "Palette.cs";
    private const string paletteDotCsContent = """
      using System;

      /*****************************************************************************/
      /* <auto-generated>                                                          */
      /*   This file was generated by CatppuccinGenerator.                         */
      /*                                                                           */
      /*   Changes to this file may cause incorrect behavior and will be lost if   */
      /*   the code is regenerated.                                                */
      /* </auto-generated>                                                         */
      /*****************************************************************************/

      namespace Catppuccin {
        /// <summary>
        /// The Catppuccin palette.json file.
        /// </summary>
        public class Palette {
          private static readonly Palette instance = new();

          /// <summary>
          /// A singleton instance of the <see cref="Palette"/>.
          /// </summary>
          public static Palette Instance => instance;

          /// <summary>
          /// The Latte flavor.
          /// </summary>
          public Flavor Latte { get; } = new() {
            {latte}
          };

          /// <summary>
          /// The Frappé flavor.
          /// </summary>
          public Flavor Frappe { get; } = new() {
            {frappe}
          };

          /// <summary>
          /// The Macchiato flavor.
          /// </summary>
          public Flavor Macchiato { get; } = new() {
            {macchiato}
          };

          /// <summary>
          /// The Mocha flavor.
          /// </summary>
          public Flavor Mocha { get; } = new() {
            {mocha}
          };

          /// <summary>
          /// Allows indexing of the palette flavor using <paramref name="flavor"/>.
          /// </summary>
          /// <param name="flavor">The Catppuccin flavor.</param>
          /// <returns>A <see cref="Flavor"/>.</returns>
          /// <exception cref="IndexOutOfRangeException"></exception>
          public Flavor this[FlavorEnum flavor] {
            get {
              return flavor switch {
                FlavorEnum.Latte => Latte,
                FlavorEnum.Frappe => Frappe,
                FlavorEnum.Macchiato => Macchiato,
                FlavorEnum.Mocha => Mocha,
                _ => throw new IndexOutOfRangeException()
              };
            }
          }

          /// <summary>
          /// Initializes a <see cref="Palette"/>.
          /// </summary>
          private Palette() { }
        }
      }
      """;
    private const string paletteDotCsContentIndent = "      ";

    private const string flavorDotCsPath = "Flavor.cs";
    private const string flavorDotCsContent = """
      /*****************************************************************************/
      /* <auto-generated>                                                          */
      /*   This file was generated by CatppuccinGenerator.                         */
      /*                                                                           */
      /*   Changes to this file may cause incorrect behavior and will be lost if   */
      /*   the code is regenerated.                                                */
      /* </auto-generated>                                                         */
      /*****************************************************************************/

      namespace Catppuccin {
        /// <summary>
        /// A Catppuccin palette.json flavor.
        /// </summary>
        public class Flavor {
          /// <summary>
          /// Flavor colors.
          /// </summary>
          public required Colors Colors { get; set; }

          /// <summary>
          /// Flavor ANSI colors.
          /// </summary>
          public required AnsiColors AnsiColors { get; set; }
        }
      }
      """;

    private const string colorsDotCsPath = "Colors.cs";
    private const string colorsDotCsContent = """
      using System;

      /*****************************************************************************/
      /* <auto-generated>                                                          */
      /*   This file was generated by CatppuccinGenerator.                         */
      /*                                                                           */
      /*   Changes to this file may cause incorrect behavior and will be lost if   */
      /*   the code is regenerated.                                                */
      /* </auto-generated>                                                         */
      /*****************************************************************************/

      namespace Catppuccin {
        /// <summary>
        /// Catppuccin flavor colors in palette.json.
        /// </summary>
        public class Colors {
          /// <summary>
          /// Rosewater.
          /// </summary>
          public required Color Rosewater { get; set; }

          /// <summary>
          /// Flamingo.
          /// </summary>
          public required Color Flamingo { get; set; }

          /// <summary>
          /// Pink.
          /// </summary>
          public required Color Pink { get; set; }

          /// <summary>
          /// Mauve.
          /// </summary>
          public required Color Mauve { get; set; }

          /// <summary>
          /// Red.
          /// </summary>
          public required Color Red { get; set; }

          /// <summary>
          /// Maroon.
          /// </summary>
          public required Color Maroon { get; set; }

          /// <summary>
          /// Peach.
          /// </summary>
          public required Color Peach { get; set; }

          /// <summary>
          /// Yellow.
          /// </summary>
          public required Color Yellow { get; set; }

          /// <summary>
          /// Green.
          /// </summary>
          public required Color Green { get; set; }

          /// <summary>
          /// Teal.
          /// </summary>
          public required Color Teal { get; set; }

          /// <summary>
          /// Sky.
          /// </summary>
          public required Color Sky { get; set; }

          /// <summary>
          /// Sapphire.
          /// </summary>
          public required Color Sapphire { get; set; }

          /// <summary>
          /// Blue.
          /// </summary>
          public required Color Blue { get; set; }

          /// <summary>
          /// Lavender.
          /// </summary>
          public required Color Lavender { get; set; }

          /// <summary>
          /// Text.
          /// </summary>
          public required Color Text { get; set; }

          /// <summary>
          /// Subtext 1.
          /// </summary>
          public required Color Subtext1 { get; set; }

          /// <summary>
          /// Subtext 0.
          /// </summary>
          public required Color Subtext0 { get; set; }

          /// <summary>
          /// Overlay 2.
          /// </summary>
          public required Color Overlay2 { get; set; }

          /// <summary>
          /// Overlay 1.
          /// </summary>
          public required Color Overlay1 { get; set; }

          /// <summary>
          /// Overlay 0.
          /// </summary>
          public required Color Overlay0 { get; set; }

          /// <summary>
          /// Surface 2.
          /// </summary>
          public required Color Surface2 { get; set; }

          /// <summary>
          /// Surface 1.
          /// </summary>
          public required Color Surface1 { get; set; }

          /// <summary>
          /// Surface 0.
          /// </summary>
          public required Color Surface0 { get; set; }

          /// <summary>
          /// Base.
          /// </summary>
          public required Color Base { get; set; }

          /// <summary>
          /// Mantle.
          /// </summary>
          public required Color Mantle { get; set; }

          /// <summary>
          /// Crust.
          /// </summary>
          public required Color Crust { get; set; }

          /// <summary>
          /// Allows indexing of the color using <paramref name="color"/>.
          /// </summary>
          /// <param name="color">The color.</param>
          /// <returns>A <see cref="Color"/>.</returns>
          /// <exception cref="IndexOutOfRangeException"></exception>
          public Color this[ColorEnum color] {
            get {
              return color switch {
                ColorEnum.Rosewater => Rosewater,
                ColorEnum.Flamingo => Flamingo,
                ColorEnum.Pink => Pink,
                ColorEnum.Mauve => Mauve,
                ColorEnum.Red => Red,
                ColorEnum.Maroon => Maroon,
                ColorEnum.Peach => Peach,
                ColorEnum.Yellow => Yellow,
                ColorEnum.Green => Green,
                ColorEnum.Teal => Teal,
                ColorEnum.Sky => Sky,
                ColorEnum.Sapphire => Sapphire,
                ColorEnum.Blue => Blue,
                ColorEnum.Lavender => Lavender,
                ColorEnum.Text => Text,
                ColorEnum.Subtext1 => Subtext1,
                ColorEnum.Subtext0 => Subtext0,
                ColorEnum.Overlay2 => Overlay2,
                ColorEnum.Overlay1 => Overlay1,
                ColorEnum.Overlay0 => Overlay0,
                ColorEnum.Surface2 => Surface2,
                ColorEnum.Surface1 => Surface1,
                ColorEnum.Surface0 => Surface0,
                ColorEnum.Base => Base,
                ColorEnum.Mantle => Mantle,
                ColorEnum.Crust => Crust,
                _ => throw new IndexOutOfRangeException()
              };
            }
          }
        }
      }
      """;

    private const string colorDotCsPath = "Color.cs";
    private const string colorDotCsContent = """
      using System.Collections.Generic;

      /*****************************************************************************/
      /* <auto-generated>                                                          */
      /*   This file was generated by CatppuccinGenerator.                         */
      /*                                                                           */
      /*   Changes to this file may cause incorrect behavior and will be lost if   */
      /*   the code is regenerated.                                                */
      /* </auto-generated>                                                         */
      /*****************************************************************************/

      namespace Catppuccin {
        /// <summary>
        /// A Catppuccin flavor color in palette.json.
        /// </summary>
        public class Color {
          /// <summary>
          /// The color name.
          /// </summary>
          public required string Name { get; set; }

          /// <summary>
          /// The color's RGB triplet.
          /// </summary>
          public required Rgb Rgb { get; set; }{sdColor}{wuiColor}{solidColorBrush}
        }
      }
      """;
    private const string colorDotCsSDColorContent = """


          private static readonly Dictionary<Rgb, System.Drawing.Color> sdColorCache = [];

          /// <summary>
          /// A <see cref="System.Drawing.Color"/> for the color.
          /// </summary>
          public System.Drawing.Color SDColor => SDColorCache(Rgb);

          /// <summary>
          /// Caches and returns a <see cref="System.Drawing.Color"/> based on
          /// <paramref name="rgb"/>.
          /// </summary>
          /// <param name="rgb">The color for which to return a <see
          /// cref="System.Drawing.Color"/>.</param>
          /// <returns>A <see cref="System.Drawing.Color"/>.</returns>
          private static System.Drawing.Color SDColorCache(Rgb rgb) {
            return sdColorCache.TryGetValue(rgb, out System.Drawing.Color value)
              ? value
              : (sdColorCache[rgb] = System.Drawing.Color.FromArgb(0xff, rgb.Red, rgb.Green, rgb.Blue));
          }
      """;
    private const string colorDotCsWUIColorContent = """


          private static readonly Dictionary<Rgb, Windows.UI.Color> wuiColorCache = [];

          /// <summary>
          /// A <see cref="Windows.UI.Color"/> for the color.
          /// </summary>
          public Windows.UI.Color WUIColor => WUIColorCache(Rgb);

          /// <summary>
          /// Caches and returns a <see cref="Windows.UI.Color"/> based on <paramref
          /// name="rgb"/>.
          /// </summary>
          /// <param name="rgb">The color for which to return a <see
          /// cref="Windows.UI.Color"/>.</param>
          /// <returns>A <see cref="Windows.UI.Color"/>.</returns>
          private static Windows.UI.Color WUIColorCache(Rgb rgb) {
            return wuiColorCache.TryGetValue(rgb, out Windows.UI.Color value)
              ? value
              : (wuiColorCache[rgb] = new Windows.UI.Color() { A = 0xff, R = (byte) rgb.Red, G = (byte) rgb.Green, B = (byte) rgb.Blue });
          }
      """;
    private const string colorDotCsSolidColorBrushContent = """


          private static readonly Dictionary<Rgb, Microsoft.UI.Xaml.Media.SolidColorBrush> solidColorBrushCache = [];

          /// <summary>
          /// A <see cref="Microsoft.UI.Xaml.Media.SolidColorBrush"/> for the color.
          /// </summary>
          public Microsoft.UI.Xaml.Media.SolidColorBrush SolidColorBrush => SolidColorBrushCache(Rgb);

          /// <summary>
          /// Caches and returns a <see
          /// cref="Microsoft.UI.Xaml.Media.SolidColorBrush"/> based on <paramref
          /// name="rgb"/>.
          /// </summary>
          /// <param name="rgb">The color for which to return a <see
          /// cref="Microsoft.UI.Xaml.Media.SolidColorBrush"/>.</param>
          /// <returns>A <see
          /// cref="Microsoft.UI.Xaml.Media.SolidColorBrush"/>.</returns>
          private static Microsoft.UI.Xaml.Media.SolidColorBrush SolidColorBrushCache(Rgb rgb) {
            return solidColorBrushCache.TryGetValue(rgb, out Microsoft.UI.Xaml.Media.SolidColorBrush? value)
              ? value
              : (solidColorBrushCache[rgb] = new Microsoft.UI.Xaml.Media.SolidColorBrush(WUIColorCache(rgb)));
          }
      """;

    private const string rgbDotCsPath = "Rgb.cs";
    private const string rgbDotCsContent = """
      /*****************************************************************************/
      /* <auto-generated>                                                          */
      /*   This file was generated by CatppuccinGenerator.                         */
      /*                                                                           */
      /*   Changes to this file may cause incorrect behavior and will be lost if   */
      /*   the code is regenerated.                                                */
      /* </auto-generated>                                                         */
      /*****************************************************************************/

      namespace Catppuccin {
        /// <summary>
        /// A Catppuccin flavor color rgb object in palette.json.
        /// </summary>
        public class Rgb {
          /// <summary>
          /// The red component.
          /// </summary>
          public required int Red { get; set; }

          /// <summary>
          /// The green component.
          /// </summary>
          public required int Green { get; set; }

          /// <summary>
          /// The blue component.
          /// </summary>
          public required int Blue { get; set; }
        }
      }
      """;

    private const string ansiColorsDotCsPath = "AnsiColors.cs";
    private const string ansiColorsDotCsContent = """
      using System;

      /*****************************************************************************/
      /* <auto-generated>                                                          */
      /*   This file was generated by CatppuccinGenerator.                         */
      /*                                                                           */
      /*   Changes to this file may cause incorrect behavior and will be lost if   */
      /*   the code is regenerated.                                                */
      /* </auto-generated>                                                         */
      /*****************************************************************************/

      namespace Catppuccin {
        /// <summary>
        /// Catppuccin flavor ANSI colors in palette.json.
        /// </summary>
        public class AnsiColors {
          /// <summary>
          /// Black.
          /// </summary>
          public required AnsiColorPair Black { get; set; }

          /// <summary>
          /// Red.
          /// </summary>
          public required AnsiColorPair Red { get; set; }

          /// <summary>
          /// Green.
          /// </summary>
          public required AnsiColorPair Green { get; set; }

          /// <summary>
          /// Yellow.
          /// </summary>
          public required AnsiColorPair Yellow { get; set; }

          /// <summary>
          /// Blue.
          /// </summary>
          public required AnsiColorPair Blue { get; set; }

          /// <summary>
          /// Magenta.
          /// </summary>
          public required AnsiColorPair Magenta { get; set; }

          /// <summary>
          /// Cyan.
          /// </summary>
          public required AnsiColorPair Cyan { get; set; }

          /// <summary>
          /// White.
          /// </summary>
          public required AnsiColorPair White { get; set; }

          /// <summary>
          /// Allows indexing of the ANSI color using <paramref name="ansiColor"/>.
          /// </summary>
          /// <param name="ansiColor">The ANSI color.</param>
          /// <returns>An <see cref="AnsiColorPair"/>.</returns>
          /// <exception cref="IndexOutOfRangeException"></exception>
          public Color this[AnsiColorEnum ansiColor] {
            get {
              return ansiColor switch {
                AnsiColorEnum.Black => Black.Normal,
                AnsiColorEnum.Red => Red.Normal,
                AnsiColorEnum.Green => Green.Normal,
                AnsiColorEnum.Yellow => Yellow.Normal,
                AnsiColorEnum.Blue => Blue.Normal,
                AnsiColorEnum.Magenta => Magenta.Normal,
                AnsiColorEnum.Cyan => Cyan.Normal,
                AnsiColorEnum.White => White.Normal,
                AnsiColorEnum.BrightBlack => Black.Bright,
                AnsiColorEnum.BrightRed => Red.Bright,
                AnsiColorEnum.BrightGreen => Green.Bright,
                AnsiColorEnum.BrightYellow => Yellow.Bright,
                AnsiColorEnum.BrightBlue => Blue.Bright,
                AnsiColorEnum.BrightMagenta => Magenta.Bright,
                AnsiColorEnum.BrightCyan => Cyan.Bright,
                AnsiColorEnum.BrightWhite => White.Bright,
                _ => throw new IndexOutOfRangeException()
              };
            }
          }
        }
      }
      """;

    private const string ansiColorPairDotCsPath = "AnsiColorPair.cs";
    private const string ansiColorPairDotCsContent = """
      /*****************************************************************************/
      /* <auto-generated>                                                          */
      /*   This file was generated by CatppuccinGenerator.                         */
      /*                                                                           */
      /*   Changes to this file may cause incorrect behavior and will be lost if   */
      /*   the code is regenerated.                                                */
      /* </auto-generated>                                                         */
      /*****************************************************************************/

      namespace Catppuccin {
        /// <summary>
        /// A Catppuccin palette.json ANSI color pair.
        /// </summary>
        public class AnsiColorPair {
          /// <summary>
          /// The normal (non-bright) ANSI color.
          /// </summary>
          public required Color Normal { get; set; }

          /// <summary>
          /// The bright ANSI color.
          /// </summary>
          public required Color Bright { get; set; }
        }
      }
      """;

    private const string flavorEnumDotCsPath = "FlavorEnum.cs";
    private const string flavorEnumDotCsContent = """
      /*****************************************************************************/
      /* <auto-generated>                                                          */
      /*   This file was generated by CatppuccinGenerator.                         */
      /*                                                                           */
      /*   Changes to this file may cause incorrect behavior and will be lost if   */
      /*   the code is regenerated.                                                */
      /* </auto-generated>                                                         */
      /*****************************************************************************/

      namespace Catppuccin {
        /// <summary>
        /// Catppuccin flavors.
        /// </summary>
        public enum FlavorEnum {
          Latte,
          Frappe,
          Macchiato,
          Mocha
        }
      }
      """;

    private const string colorEnumDotCsPath = "ColorEnum.cs";
    private const string colorEnumDotCsContent = """
      /*****************************************************************************/
      /* <auto-generated>                                                          */
      /*   This file was generated by CatppuccinGenerator.                         */
      /*                                                                           */
      /*   Changes to this file may cause incorrect behavior and will be lost if   */
      /*   the code is regenerated.                                                */
      /* </auto-generated>                                                         */
      /*****************************************************************************/

      namespace Catppuccin {
        /// <summary>
        /// Catppuccin colors.
        /// </summary>
        public enum ColorEnum {
          Rosewater,
          Flamingo,
          Pink,
          Mauve,
          Red,
          Maroon,
          Peach,
          Yellow,
          Green,
          Teal,
          Sky,
          Sapphire,
          Blue,
          Lavender,
          Text,
          Subtext1,
          Subtext0,
          Overlay2,
          Overlay1,
          Overlay0,
          Surface2,
          Surface1,
          Surface0,
          Base,
          Mantle,
          Crust
        }
      }
      """;

    private const string ansiColorEnumDotCsPath = "AnsiColorEnum.cs";
    private const string ansiColorEnumDotCsContent = """
      /*****************************************************************************/
      /* <auto-generated>                                                          */
      /*   This file was generated by CatppuccinGenerator.                         */
      /*                                                                           */
      /*   Changes to this file may cause incorrect behavior and will be lost if   */
      /*   the code is regenerated.                                                */
      /* </auto-generated>                                                         */
      /*****************************************************************************/

      namespace Catppuccin {
        /// <summary>
        /// Catppuccin ANSI colors.
        /// </summary>
        public enum AnsiColorEnum {
          Black,
          Red,
          Green,
          Yellow,
          Blue,
          Magenta,
          Cyan,
          White,
          BrightBlack,
          BrightRed,
          BrightGreen,
          BrightYellow,
          BrightBlue,
          BrightMagenta,
          BrightCyan,
          BrightWhite
        }
      }
      """;

    private readonly string? outputPath;
    private readonly bool generateSDColor;
    private readonly bool generateWUIColor;
    private readonly bool generateSolidColorBrush;

    /// <summary>
    /// Initializes a <see cref="Generator"/>.
    /// </summary>
    /// <param name="outputPath">The generated code output path.</param>
    /// <param name="generateSDColor">Whether to generate SDColor.</param>
    /// <param name="generateWUIColor">Whether to generate WUIColor.</param>
    /// <param name="generateSolidColorBrush">Whether to generate SolidColorBrush.</param>
    internal Generator(string? outputPath, bool generateSDColor, bool generateWUIColor, bool generateSolidColorBrush) {
      this.outputPath = outputPath;
      this.generateSDColor = generateSDColor;
      this.generateWUIColor = generateWUIColor;
      this.generateSolidColorBrush = generateSolidColorBrush;
    }

    /// <summary>
    /// Generates the Catppuccin code.
    /// </summary>
    /// <returns>0 on success or non-zero on failure.</returns>
    internal int Generate() {
      Palette palette;
      string outputFilePath;

      if (outputPath is not null) {
        if (!Directory.Exists(outputPath)) {
          Console.Error.WriteLine("Output directory does not exist.");
          return 1;
        }
      }

      try {
        using (StreamReader paletteStream = new(palettePath, new FileStreamOptions() { Access = FileAccess.Read, Mode = FileMode.Open })) {
          palette = JsonSerializer.Deserialize(paletteStream.BaseStream, PaletteContext.Default.Palette)!;
        }
      } catch (IOException e) {
        Console.Error.WriteLine($"Unable to read from {palettePath}. {e.Message}");
        return 2;
      } catch (FormatException e) {
        Console.Error.WriteLine($"Parse error encountered in {palettePath}. {e.Message}");
        return 3;
      }

      outputFilePath = Path.Join(outputPath, paletteDotCsPath);

      try {
        using (StreamWriter paletteDotCsStream = new(outputFilePath, new FileStreamOptions() { Access = FileAccess.Write, Mode = FileMode.Create })) {
          paletteDotCsStream.Write(
            paletteDotCsContent.Replace(
              "{latte}",
              Palette.ToCode(palette.Latte, paletteDotCsContentIndent)
            ).Replace(
              "{frappe}",
              Palette.ToCode(palette.Frappe, paletteDotCsContentIndent)
            ).Replace(
              "{macchiato}",
              Palette.ToCode(palette.Macchiato, paletteDotCsContentIndent)
            ).Replace(
              "{mocha}",
              Palette.ToCode(palette.Mocha, paletteDotCsContentIndent)
            )
          );
        }
      } catch (IOException e) {
        Console.Error.WriteLine($"Unable to write to {outputFilePath}. {e.Message}");
        return 4;
      }

      outputFilePath = Path.Join(outputPath, flavorDotCsPath);

      try {
        using (StreamWriter flavorDotCsStream = new(outputFilePath, new FileStreamOptions() { Access = FileAccess.Write, Mode = FileMode.Create })) {
          flavorDotCsStream.Write(flavorDotCsContent);
        }
      } catch (IOException e) {
        Console.Error.WriteLine($"Unable to write to {outputFilePath}. {e.Message}");
        return 5;
      }

      outputFilePath = Path.Join(outputPath, colorsDotCsPath);

      try {
        using (StreamWriter colorsDotCsStream = new(outputFilePath, new FileStreamOptions() { Access = FileAccess.Write, Mode = FileMode.Create })) {
          colorsDotCsStream.Write(colorsDotCsContent);
        }
      } catch (IOException e) {
        Console.Error.WriteLine($"Unable to write to {outputFilePath}. {e.Message}");
        return 6;
      }

      outputFilePath = Path.Join(outputPath, colorDotCsPath);

      try {
        using (StreamWriter colorDotCsStream = new(outputFilePath, new FileStreamOptions() { Access = FileAccess.Write, Mode = FileMode.Create })) {
          string _colorDotCsContent = colorDotCsContent;

          _colorDotCsContent = generateSDColor
            ? _colorDotCsContent.Replace("{sdColor}", colorDotCsSDColorContent)
            : _colorDotCsContent.Replace("{sdColor}", string.Empty);

          _colorDotCsContent = generateWUIColor
            ? _colorDotCsContent.Replace("{wuiColor}", colorDotCsWUIColorContent)
            : _colorDotCsContent.Replace("{wuiColor}", string.Empty);

          _colorDotCsContent = generateSolidColorBrush
            ? _colorDotCsContent.Replace("{solidColorBrush}", colorDotCsSolidColorBrushContent)
            : _colorDotCsContent.Replace("{solidColorBrush}", string.Empty);

          colorDotCsStream.Write(_colorDotCsContent);
        }
      } catch (IOException e) {
        Console.Error.WriteLine($"Unable to write to {outputFilePath}. {e.Message}");
        return 7;
      }

      outputFilePath = Path.Join(outputPath, rgbDotCsPath);

      try {
        using (StreamWriter rgbDotCsStream = new(outputFilePath, new FileStreamOptions() { Access = FileAccess.Write, Mode = FileMode.Create })) {
          rgbDotCsStream.Write(rgbDotCsContent);
        }
      } catch (IOException e) {
        Console.Error.WriteLine($"Unable to write to {outputFilePath}. {e.Message}");
        return 8;
      }

      outputFilePath = Path.Join(outputPath, ansiColorsDotCsPath);

      try {
        using (StreamWriter ansiColorsDotCsStream = new(outputFilePath, new FileStreamOptions() { Access = FileAccess.Write, Mode = FileMode.Create })) {
          ansiColorsDotCsStream.Write(ansiColorsDotCsContent);
        }
      } catch (IOException e) {
        Console.Error.WriteLine($"Unable to write to {outputFilePath}. {e.Message}");
        return 9;
      }

      outputFilePath = Path.Join(outputPath, ansiColorPairDotCsPath);

      try {
        using (StreamWriter ansiColorPairDotCsStream = new(outputFilePath, new FileStreamOptions() { Access = FileAccess.Write, Mode = FileMode.Create })) {
          ansiColorPairDotCsStream.Write(ansiColorPairDotCsContent);
        }
      } catch (IOException e) {
        Console.Error.WriteLine($"Unable to write to {outputFilePath}. {e.Message}");
        return 10;
      }

      outputFilePath = Path.Join(outputPath, flavorEnumDotCsPath);

      try {
        using (StreamWriter flavorEnumDotCsStream = new(outputFilePath, new FileStreamOptions() { Access = FileAccess.Write, Mode = FileMode.Create })) {
          flavorEnumDotCsStream.Write(flavorEnumDotCsContent);
        }
      } catch (IOException e) {
        Console.Error.WriteLine($"Unable to write to {outputFilePath}. {e.Message}");
        return 11;
      }

      outputFilePath = Path.Join(outputPath, colorEnumDotCsPath);

      try {
        using (StreamWriter colorEnumDotCsStream = new(outputFilePath, new FileStreamOptions() { Access = FileAccess.Write, Mode = FileMode.Create })) {
          colorEnumDotCsStream.Write(colorEnumDotCsContent);
        }
      } catch (IOException e) {
        Console.Error.WriteLine($"Unable to write to {outputFilePath}. {e.Message}");
        return 12;
      }

      outputFilePath = Path.Join(outputPath, ansiColorEnumDotCsPath);

      try {
        using (StreamWriter ansiColorEnumDotCsStream = new(outputFilePath, new FileStreamOptions() { Access = FileAccess.Write, Mode = FileMode.Create })) {
          ansiColorEnumDotCsStream.Write(ansiColorEnumDotCsContent);
        }
      } catch (IOException e) {
        Console.Error.WriteLine($"Unable to write to {outputFilePath}. {e.Message}");
        return 13;
      }

      return 0;
    }
  }
}
