using Microsoft.UI.Text;
using Microsoft.UI.Xaml.Controls;
using Spakov.TermBar.Configuration.Json;
using System.Collections.Generic;
using System.Text.Encodings.Web;
using System.Text.Json;
using Windows.UI;

namespace Spakov.TermBar.Configuration
{
    /// <summary>
    /// A simple JSON syntax highlighter.
    /// </summary>
    /// <remarks>
    /// <para>Operates on a <see cref="RichEditBox"/> and presents a JSON
    /// string as syntax-formatted text, as defined in a <see
    /// cref="JsonFormatSyntaxColors"/>.</para>
    /// <para>Generated by ChatGPT and tweaked by hand.</para>
    /// </remarks>
    internal static class JsonFormatter
    {
        private static readonly JavaScriptEncoder s_javaScriptEncoder = JavaScriptEncoderJsonTartare.Instance;

        /// <summary>
        /// Formats <paramref name="json"/> and fills <paramref
        /// name="richEditBox"/> with its contents.
        /// </summary>
        /// <param name="richEditBox">A <see cref="RichEditBox"/>.</param>
        /// <param name="json">JSON text.</param>
        internal static void FormatJson(RichEditBox richEditBox, string json, JsonFormatSyntaxColors jsonFormatSyntaxColors)
        {
            RichEditTextDocument richEditTextDocument = richEditBox.Document;

            // Clear the document
            richEditTextDocument.SetText(TextSetOptions.None, string.Empty);

            using JsonDocument jsonDocument = JsonDocument.Parse(json);

            // Start with a range at the end
            ITextRange insertionPoint = richEditTextDocument.GetRange(0, 0);
            FormatElement(jsonDocument.RootElement, richEditTextDocument, ref insertionPoint, 0, jsonFormatSyntaxColors);
        }

        /// <summary>
        /// Recursively formats <paramref name="jsonElement"/>, adding to
        /// <paramref name="richEditTextDocument"/>.
        /// </summary>
        /// <param name="jsonElement">A <see cref="JsonElement"/>.</param>
        /// <param name="richEditTextDocument">A <see
        /// cref="RichEditTextDocument"/>.</param>
        /// <param name="insertionPoint">The insertion point in <paramref
        /// name="richEditTextDocument"/>.</param>
        /// <param name="indent">The indent level.</param>
        private static void FormatElement(JsonElement jsonElement, RichEditTextDocument richEditTextDocument, ref ITextRange insertionPoint, int indent, JsonFormatSyntaxColors jsonFormatSyntaxColors)
        {
            Color defaultColor = jsonFormatSyntaxColors[JsonValueKind.Undefined];
            Color color = jsonFormatSyntaxColors[jsonElement.ValueKind];

            switch (jsonElement.ValueKind)
            {
                case JsonValueKind.Object:
                    Append(richEditTextDocument, ref insertionPoint, "{\r\n", defaultColor);

                    int i = 0;

                    foreach (JsonProperty prop in jsonElement.EnumerateObject())
                    {
                        if (i++ > 0)
                        {
                            Append(richEditTextDocument, ref insertionPoint, ",\r\n", defaultColor);
                        }

                        Append(richEditTextDocument, ref insertionPoint, Indent(indent + 1), defaultColor);
                        Append(richEditTextDocument, ref insertionPoint, $"\"{prop.Name}\"", color);
                        Append(richEditTextDocument, ref insertionPoint, ": ", defaultColor);
                        FormatElement(prop.Value, richEditTextDocument, ref insertionPoint, indent + 1, jsonFormatSyntaxColors);
                    }

                    Append(richEditTextDocument, ref insertionPoint, "\r\n" + Indent(indent) + "}", defaultColor);

                    break;

                case JsonValueKind.Array:
                    Append(richEditTextDocument, ref insertionPoint, "[\r\n", defaultColor);

                    int j = 0;

                    foreach (JsonElement item in jsonElement.EnumerateArray())
                    {
                        if (j++ > 0)
                        {
                            Append(richEditTextDocument, ref insertionPoint, ",\r\n", defaultColor);
                        }

                        Append(richEditTextDocument, ref insertionPoint, Indent(indent + 1), defaultColor);
                        FormatElement(item, richEditTextDocument, ref insertionPoint, indent + 1, jsonFormatSyntaxColors);
                    }

                    Append(richEditTextDocument, ref insertionPoint, "\r\n" + Indent(indent) + "]", defaultColor);

                    break;

                case JsonValueKind.String:
                    Append(richEditTextDocument, ref insertionPoint, $"\"{s_javaScriptEncoder.Encode(jsonElement.GetString()!)}\"", color);

                    break;

                case JsonValueKind.Number:
                    Append(richEditTextDocument, ref insertionPoint, jsonElement.ToString(), color);

                    break;

                case JsonValueKind.True:
                case JsonValueKind.False:
                    Append(richEditTextDocument, ref insertionPoint, jsonElement.ToString().ToLower(), color);

                    break;

                case JsonValueKind.Null:
                    Append(richEditTextDocument, ref insertionPoint, "null", color);

                    break;
            }
        }

        /// <summary>
        /// Appends <paramref name="text"/> to <paramref
        /// name="richEditTextDocument"/>, applying <paramref name="color"/>
        /// and <paramref name="bold"/>, updating <paramref
        /// name="insertionPoint"/>.
        /// </summary>
        /// <param name="richEditTextDocument">A <see
        /// cref="RichEditTextDocument"/>.</param>
        /// <param name="insertionPoint">The insertion point in <paramref
        /// name="richEditTextDocument"/>.</param>
        /// <param name="text">The text to append.</param>
        /// <param name="color">The color to apply.</param>
        /// <param name="bold">Whether to add bold text.</param>
        private static void Append(RichEditTextDocument richEditTextDocument, ref ITextRange insertionPoint, string text, Color color, bool bold = false)
        {
            // Always move to the true end to keep appending in order
            richEditTextDocument.GetText(TextGetOptions.None, out string currentText);

            ITextRange end = richEditTextDocument.GetRange(currentText.Length, currentText.Length);
            end.Text = text;
            end.CharacterFormat.ForegroundColor = color;
            end.CharacterFormat.Bold = bold ? FormatEffect.On : FormatEffect.Off;

            insertionPoint = end;
        }

        /// <summary>
        /// Indents to the level described in <paramref name="indent"/>.
        /// </summary>
        /// <param name="indent">The indent level.</param>
        /// <returns>An indent to the level described in <paramref
        /// name="indent"/>.</returns>
        private static string Indent(int indent) => new(' ', indent * 2);
    }

    /// <summary>
    /// JSON format syntax colors.
    /// </summary>
    internal class JsonFormatSyntaxColors
    {
        private readonly Dictionary<JsonValueKind, Color> _colors = [];

        /// <summary>
        /// Returns the color for <paramref name="jsonValueKind"/>.
        /// </summary>
        /// <param name="jsonValueKind">A <see cref="JsonValueKind"/>.</param>
        /// <returns>A <see cref="Color"/>.</returns>
        public Color this[JsonValueKind jsonValueKind] => _colors[jsonValueKind];

        /// <summary>
        /// Initializes a <see cref="JsonFormatSyntaxColors"/>.
        /// </summary>
        /// <param name="defaultColor">The default color.</param>
        /// <param name="objectColor">The color for objects.</param>
        /// <param name="stringColor">The color for strings.</param>
        /// <param name="numberColor">The color for numbers.</param>
        /// <param name="booleanColor">The color for Booleans.</param>
        /// <param name="nullColor">The color for null.</param>
        public JsonFormatSyntaxColors(Color defaultColor, Color objectColor, Color stringColor, Color numberColor, Color booleanColor, Color nullColor)
        {
            _colors[JsonValueKind.Undefined] = defaultColor;
            _colors[JsonValueKind.Object] = objectColor;
            _colors[JsonValueKind.Array] = defaultColor;
            _colors[JsonValueKind.String] = stringColor;
            _colors[JsonValueKind.Number] = numberColor;
            _colors[JsonValueKind.True] = booleanColor;
            _colors[JsonValueKind.False] = booleanColor;
            _colors[JsonValueKind.Null] = nullColor;
        }
    }
}